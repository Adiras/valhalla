/*
 * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// Generated from the source in TestInvokeInterface.java, compiled for
// nestmates. The code is not modified from that but exists as a jcod file
// to ensure we don't accidentally compile it dynamically for the wrong
// release.

class TestInvokeInterface$StaticIface {
  0xCAFEBABE;
  0; // minor version
  53; // version - FXME: will need to be real nestmate release version
  [] { // Constant Pool
    ; // first element is empty
    Field #19 #20; // #1
    String #21; // #2
    Method #22 #23; // #3
    InterfaceMethod #5 #24; // #4
    class #25; // #5
    class #26; // #6
    Utf8 "priv_invoke"; // #7
    Utf8 "()V"; // #8
    Utf8 "Code"; // #9
    Utf8 "LineNumberTable"; // #10
    Utf8 "access_priv"; // #11
    Utf8 "StaticIface"; // #12
    Utf8 "InnerClasses"; // #13
    Utf8 "(LTestInvokeInterface$StaticIface;)V"; // #14
    Utf8 "SourceFile"; // #15
    Utf8 "TestInvokeInterface.java"; // #16
    Utf8 "NestHost"; // #17
    class #27; // #18
    class #28; // #19
    NameAndType #29 #30; // #20
    Utf8 "StaticIface::priv_invoke"; // #21
    class #31; // #22
    NameAndType #32 #33; // #23
    NameAndType #7 #8; // #24
    Utf8 "TestInvokeInterface$StaticIface"; // #25
    Utf8 "java/lang/Object"; // #26
    Utf8 "TestInvokeInterface"; // #27
    Utf8 "java/lang/System"; // #28
    Utf8 "out"; // #29
    Utf8 "Ljava/io/PrintStream;"; // #30
    Utf8 "java/io/PrintStream"; // #31
    Utf8 "println"; // #32
    Utf8 "(Ljava/lang/String;)V"; // #33
  } // Constant Pool

  0x0600; // access
  #5;// this_cpx
  #6;// super_cpx

  [] { // Interfaces
  } // Interfaces

  [] { // fields
  } // fields

  [] { // methods
    { // Member
      0x0002; // access
      #7; // name_cpx
      #8; // sig_cpx
      [] { // Attributes
        Attr(#9) { // Code
          2; // max_stack
          1; // max_locals
          Bytes[]{
            0xB200011202B60003;
            0xB1;
          };
          [] { // Traps
          } // end Traps
          [] { // Attributes
            Attr(#10) { // LineNumberTable
              [] { // LineNumberTable
                0  42;
                8  43;
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
    ;
    { // Member
      0x0001; // access
      #11; // name_cpx
      #14; // sig_cpx
      [] { // Attributes
        Attr(#9) { // Code
          1; // max_stack
          2; // max_locals
          Bytes[]{
            0x2BB900040100B1;
          };
          [] { // Traps
          } // end Traps
          [] { // Attributes
            Attr(#10) { // LineNumberTable
              [] { // LineNumberTable
                0  46;
                6  47;
              }
            } // end LineNumberTable
          } // Attributes
        } // end Code
      } // Attributes
    } // Member
  } // methods

  [] { // Attributes
    Attr(#15) { // SourceFile
      #16;
    } // end SourceFile
    ;
    Attr(#17) { // NestHost
      0x0012;
    } // end NestHost
    ;
    Attr(#13) { // InnerClasses
      [] { // InnerClasses
        #5 #18 #12 1544;
      }
    } // end InnerClasses
  } // Attributes
} // end class TestInvokeInterface$StaticIface
